# -*- coding: utf-8 -*-
"""–î–ó8_–ë–∞–±–µ–Ω–∫–æ–ê–Ω—Ç–æ–Ω–´–≤–∞–Ω–æ–≤–∏—á.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P8mnmEGnasftCgCFvFrcAoCjwVOL3RJP

## –ó–∞–≤–¥–∞–Ω–Ω—è 1

 –ë—É–¥–µ–º–æ –≤–≤–∞–∂–∞—Ç–∏, —â–æ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π —É –∫–æ–∂–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É –¥–æ—Ä—ñ–≤–Ω—é—î
ùë•
‚àº
Œì
(
0.3
,
1.1
)
,

–¥–µ
–ì ‚Äî –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É.



–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é
ùëõ
=
100
n=100 —Ä–∞–∑—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—É
ùë°
t.

–∞) –ü–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É
ùë•
x.

–±) –ó–∞–ø—É—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –∑
ùë°
t –≤—ñ–¥ 1 –¥–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ~60 –∑ –∫—Ä–æ–∫–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1 –∞–±–æ 2.

–ü—Ä–∏–º—ñ—Ç–∫–∞: –∫—ñ–Ω—Ü–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è t –≤–∑—è—Ç–æ —É–º–æ–≤–Ω–æ —Ä—ñ–≤–Ω–∏–º 60, –∞–ª–µ —Ü–µ –Ω–µ –≤—ñ–¥—ñ–≥—Ä–∞—î –≤–µ–ª–∏–∫–æ—ó —Ä–æ–ª—ñ, –≥–æ–ª–æ–≤–Ω–µ, —â–æ–± –≤–æ–Ω–æ –±—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å, –∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—Ä–æ–∫—É ‚Äî –¥–æ–∑–≤–æ–ª—è–ª–æ –ø–æ–±–∞—á–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ–∫—É –∑–º—ñ–Ω–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ —Ç–∞–∫ –≤–∞–∂–ª–∏–≤—ñ.


–î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
ùë°
t –ø–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ü—ñ–Ω–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä –π–æ–≥–æ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å. –ó—Ä–æ–±–∏ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º
ùë°
t.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gamma, normaltest

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É
shape_param = 0.3
scale_param = 1.1

def simulate_stock_prices(n_simulations, time_steps):
    # –°–∏–º—É–ª—è—Ü—ñ—è –∑–º—ñ–Ω —Ü—ñ–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É
    price_changes = gamma.rvs(shape_param, scale=scale_param, size=(n_simulations, time_steps))
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω –∞–∫—Ü—ñ–π
    prices = np.cumprod(1 + price_changes, axis=1)
    return prices[:, -1]  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∫—Ä–æ—Ü—ñ —á–∞—Å—É

def plot_histogram(data, title):
    plt.figure()
    plt.hist(data, bins=20, density=True, edgecolor='black')
    plt.title(title)
    plt.xlabel('–¶—ñ–Ω–∞ –∞–∫—Ü—ñ–π')
    plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    plt.grid(True)
    plt.show()

def simulate_and_plot(n_simulations, max_time_steps, step):
    for t in range(1, max_time_steps + 1, step):
        prices = simulate_stock_prices(n_simulations, t)
        plot_histogram(prices, f'–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Ü—ñ–Ω –∞–∫—Ü—ñ–π –¥–ª—è t={t} –æ–¥–∏–Ω–∏—Ü—å —á–∞—Å—É')
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å
        stat, p_value = normaltest(prices)
        print(f"–¢–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è t={t} –æ–¥–∏–Ω–∏—Ü—å —á–∞—Å—É: stat={stat:.2f}, p-–∑–Ω–∞—á–µ–Ω–Ω—è={p_value:.2f}")

# –°–∏–º—É–ª—è—Ü—ñ—è —Ç–∞ –ø–æ–±—É–¥–æ–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤ —á–∞—Å—É
n_simulations = 100
max_time_steps = 60
step = 2

# –ö—Ä–æ–∫ 2: –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–º—ñ–Ω —Ü—ñ–Ω
n_samples = 1000
price_changes = gamma.rvs(shape_param, scale=scale_param, size=n_samples)
plot_histogram(price_changes, '–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –∑–º—ñ–Ω —Ü—ñ–Ω (x) –∑ –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª—É')

# –ö—Ä–æ–∫ 3: –°–∏–º—É–ª—è—Ü—ñ—è —Ç–∞ –ø–æ–±—É–¥–æ–≤–∞ —Ü—ñ–Ω –∞–∫—Ü—ñ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤ —á–∞—Å—É
simulate_and_plot(n_simulations, max_time_steps, step)

"""### –í–∏—Å–Ω–æ–≤–æ–∫
- –ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π
ùë•
x –∑–≥—ñ–¥–Ω–æ –∑ –≥–∞–º–º–∞-—Ä–æ–∑–ø–æ–¥—ñ–ª–æ–º
Œì
(0.3,1.1)
 –Ω–µ —î –Ω–æ—Ä–º–∞–ª—å–Ω–æ—é, —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç—å—Å—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–æ—é.

- –°–∏–º—É–ª—è—Ü—ñ—ó —Ü—ñ–Ω –∞–∫—Ü—ñ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—É
t –ø–æ–∫–∞–∑—É—é—Ç—å, —â–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–Ω –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º t. –î–ª—è –º–∞–ª–∏—Ö t —Ä–æ–∑–ø–æ–¥—ñ–ª–∏ –∑–Ω–∞—á–Ω–æ –≤—ñ–¥—Ö–∏–ª—è—é—Ç—å—Å—è –≤—ñ–¥ –Ω–æ—Ä–º–∞–ª—å–Ω–∏—Ö.

- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ–∫–∞–∑—É—î, —â–æ –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—Ä–æ–∫—ñ–≤ —á–∞—Å—É t —Ä–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–Ω –∞–∫—Ü—ñ–π –ø–æ—á–∏–Ω–∞—î –Ω–∞–±–ª–∏–∂–∞—Ç–∏—Å—è –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ, –∞–ª–µ –Ω–µ –∑–∞–≤–∂–¥–∏ –¥–æ—Å—è–≥–∞—î –π–æ–≥–æ. –¶–µ –≤–∏–¥–Ω–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å, –¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è p-–∑–Ω–∞—á–µ–Ω—å –º–æ–∂—É—Ç—å –∑—Ä–æ—Å—Ç–∏, —â–æ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–∞—î –±–ª–∏–∂—á–∏–º –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ.

#### –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –∑—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º —á–∞—Å—É t —Ä–æ–∑–ø–æ–¥—ñ–ª —Ü—ñ–Ω –∞–∫—Ü—ñ–π —Å—Ç–∞—î –±—ñ–ª—å—à —Å—Ç–∞–±—ñ–ª—å–Ω–∏–º —ñ –º–æ–∂–µ –Ω–∞–±–ª–∏–∂–∞—Ç–∏—Å—è –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ, –∞–ª–µ –ø–æ–≤–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∞.

## –ó–∞–≤–¥–∞–Ω–Ω—è 2

–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —ñ–∑ —Å–µ–º–∏ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö ‚Äî —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è, –±—ñ–ª–±–æ—Ä–¥–∏, Google Ads, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ–¥—ñ–∞, —ñ–Ω—Ñ–ª—é–µ–Ω—Å-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥.



–û—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ–≤–ø—á–∏–∫, "Product_Sold", –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å–Ω—É –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å —Ç–æ–≤–∞—Ä—É. –î–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Ä–∞—Ö—É–π —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–∏—Å–ø–µ—Ä—Å—ñ—é, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è, –ø–æ–±—É–¥—É–π –≥—ñ—Å—Ç–æ–≥—Ä–∞–º—É —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∞ –ø–æ—Ä–∞—Ö—É–π –∫–æ—Ä–µ–ª—è—Ü—ñ—é –∑ Product_Sold.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import shapiro, pearsonr

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
url = '/content/Advertising_Data.csv - Advertising_Data.csv'
df = pd.read_csv(url)

# –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
columns = df.columns[:-1]  # –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏, –∫—Ä—ñ–º "Product_Sold"

# –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è, –¥–∏—Å–ø–µ—Ä—Å—ñ—ó, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
stats = df[columns].agg(['mean', 'var', 'std']).T
print("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ:")
print(stats)

# –ü–æ–±—É–¥–æ–≤–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª—É
for col in columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[col], kde=True)
    plt.title(f'–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –¥–ª—è {col}')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.show()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø–æ–¥—ñ–ª—É
    stat, p = shapiro(df[col])
    alpha = 0.05
    if p > alpha:
        print(f'{col}: –†–æ–∑–ø–æ–¥—ñ–ª –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π (p = {p})')
    else:
        print(f'{col}: –†–æ–∑–ø–æ–¥—ñ–ª –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π (p = {p})')

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ "Product_Sold"
correlations = {}
for col in columns:
    corr, _ = pearsonr(df[col], df['Product_Sold'])
    correlations[col] = corr

print("–ö–æ—Ä–µ–ª—è—Ü—ñ—ó –∑ 'Product_Sold':")
for col, corr in correlations.items():
    print(f'{col}: {corr}')

# –ü–æ–±—É–¥–æ–≤–∞ —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', center=0)
plt.title('–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó')
plt.show()