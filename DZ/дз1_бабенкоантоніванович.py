# -*- coding: utf-8 -*-
"""–î–ó1_–ë–∞–±–µ–Ω–∫–æ–ê–Ω—Ç–æ–Ω–Ü–≤–∞–Ω–æ–≤–∏—á.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125wxSFMwx55kZOodwRfwtoNKf_ZNMIsi
"""

import numpy as np

# –í–µ–∫—Ç–æ—Ä–∏
a = np.array([1,2,3,4,5])
b = np.array([1/2,1,2,3,4])

# —Å—É–º–∞
sum_ab = a + b
print("1. –°—É–º–∞ –∞ —Ç–∞ b: ", sum_ab)

# –†—ñ–∑–Ω–∏—Ü—è
difr_ab = a - b
print("2. –†—ñ–∑–Ω–∏—Ü—è :", difr_ab)

# b - —Ç—Ä–∞–Ω—Å–ø–æ–Ω–æ–≤–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä , —â–æ –º–∞—î —Ä–æ–∑–º—ñ—Ä 5x1. –¢–æ–º—É —Ü—è –æ–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∑–º—ñ—Ä–∏ –Ω–µ —Å—É–º—ñ—Å–Ω—ñ.

# –ú–∞—Ç—Ä–∏—á–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b^T
outer_ab = np.outer(a, b)
print("3. –ú–∞—Ç—Ä–∏—á–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b^T:\n", outer_ab)

# –°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b
dot_ab = np.dot(a, b)
print("–°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b:", dot_ab)

# –î–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞
# –ß–æ–º—É –≤ —Ç–∞–∫–æ–º—É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ –Ω–µ –≤—ñ–¥–±—É–≤–∞–µ—Ç—å—Å—è –≤–∏—á–∏—Å–ª–µ–Ω–Ω—è???
# a = np.matrix([1,2,3,4,5])
# b = np.matrix([1/2,1,2,3,4])
hadamard_ab = a * b
print("–î–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞ a —Ç–∞ b:", hadamard_ab)

# –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è –∑ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–æ–≤–∞–Ω–∏–º –≤–µ–∫—Ç–æ—Ä–æ–º ùëè –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∑–º—ñ—Ä–∏ –Ω–µ —Å—É–º—ñ—Å–Ω—ñ –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó.

# –î—ñ–ª–µ–Ω–Ω—è
division_ab = a / b
print("–î—ñ–ª–µ–Ω–Ω—è a —Ç–∞ b:", division_ab)

import matplotlib.pyplot as plt

# –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä
x = np.array([2, 1])

# 1. –ó–º–µ–Ω—à–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –≤ 2 —Ä–∞–∑–∏ –ø–æ –æ—Å—ñ OX —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –≤ 3 —Ä–∞–∑–∏ –ø–æ –æ—Å—ñ OY
A1 = np.array([
    [0.5, 0],
    [0, 3]
])
x1 = A1.dot(x)

# 2. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
A2 = np.array([
    [-1, 0],
    [0, -1]
])
x2 = A2.dot(x)

# 3. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ -3 –ø–æ –æ—Å—ñ OX —Ç–∞ –Ω–∞ 1 –ø–æ –æ—Å—ñ OY
translation = np.array([-3, 1])
x3 = x + translation

# 4. –ó–º—ñ—â–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –Ω–∞ 60¬∞ –ø–æ –æ—Å—ñ OY
theta = np.radians(60)
A4 = np.array([
    [np.cos(theta), -np.sin(theta)],
    [np.sin(theta), np.cos(theta)]
])
x4 = A4.dot(x)

# 5. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –Ω–∞ 30¬∞
theta = np.radians(30)
A5 = np.array([
    [np.cos(theta), -np.sin(theta)],
    [np.sin(theta), np.cos(theta)]
])
x5 = A5.dot(x)

# 6. –û–±'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å –∑ –∫—Ä–æ–∫—ñ–≤ 1, 2, 4, 5 –≤ –æ–¥–Ω—É –º–∞—Ç—Ä–∏—Ü—é
A_combined = A5.dot(A4).dot(A2).dot(A1)
x_combined = A_combined.dot(x)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
fig, ax = plt.subplots()
ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)
ax.set_aspect('equal', 'box')

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä—ñ–≤
ax.quiver(0, 0, x[0], x[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Original x')
ax.quiver(0, 0, x1[0], x1[1], angles='xy', scale_units='xy', scale=1, color='green', label='Scaled x')
ax.quiver(0, 0, x2[0], x2[1], angles='xy', scale_units='xy', scale=1, color='red', label='Reflected x')
ax.quiver(0, 0, x3[0], x3[1], angles='xy', scale_units='xy', scale=1, color='purple', label='Translated x')
ax.quiver(0, 0, x4[0], x4[1], angles='xy', scale_units='xy', scale=1, color='orange', label='Rotated 60¬∞ x')
ax.quiver(0, 0, x5[0], x5[1], angles='xy', scale_units='xy', scale=1, color='brown', label='Rotated 30¬∞ x')
ax.quiver(0, 0, x_combined[0], x_combined[1], angles='xy', scale_units='xy', scale=1, color='black', label='Combined Transform x')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
ax.grid(True)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏
ax.legend()

# –ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ—ñ–∫—É
plt.show()

