# -*- coding: utf-8 -*-
"""–î–ó1_–ë–∞–±–µ–Ω–∫–æ–ê–Ω—Ç–æ–Ω–Ü–≤–∞–Ω–æ–≤–∏—á.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125wxSFMwx55kZOodwRfwtoNKf_ZNMIsi
"""

import numpy as np

# –í–µ–∫—Ç–æ—Ä–∏
a = np.array([[1, 2, 3, 4, 5]])
b = np.array([[1/2, 1, 2, 3, 4]])

# 1. —Å—É–º–∞
sum_ab = a + b
print("1. –°—É–º–∞ –∞ —Ç–∞ b: ", sum_ab)

# 2. –†—ñ–∑–Ω–∏—Ü—è
difr_ab = a - b
print("2. –†—ñ–∑–Ω–∏—Ü—è :", difr_ab)

# 3. —Å—É–º–∞ a + b.—Ç
#–î–∞–Ω–∏–π –∫–æ–¥ –æ–±—á–∏—Å–ª—é—î —Å—É–º—É –≤–µ–∫—Ç–æ—Ä—ñ–≤ a —Ç–∞ b, –¥–µ a - —Ü–µ —Ä—è–¥–æ–∫, –∞ b - —Å—Ç–æ–≤–ø–µ—Ü—å.
#–°—É–º–∞ –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ, —Ç–æ–±—Ç–æ –∫–æ–∂–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –ø–∞—Ä—ñ —ñ–∑ –≤–µ–∫—Ç–æ—Ä—ñ–≤ a —Ç–∞ b –¥–æ–¥–∞—é—Ç—å—Å—è –æ–¥–∏–Ω –¥–æ –æ–¥–Ω–æ–≥–æ.
b2 = np.array([[1/2, 1, 2, 3, 4]]).T
print("3. —Å—É–º–∞ a + b.—Ç:\n", a + b2)

# 4. –ú–∞—Ç—Ä–∏—á–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b^T
# –í–µ–∫—Ç–æ—Ä–∏ –Ω–∞ –º–∞—Ç—Ä–∏—Ü—ñ –∑ –æ–¥–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º
a_matrix = a.reshape(-1, 1)
b_matrix = b.reshape(-1, 1)
dot_product_ab = np.dot(a_matrix, b_matrix.T)
print("4. –î–æ–±—É—Ç–æ–∫ –º–∞—Ç—Ä–∏—Ü—å a —Ç–∞ b^T:", dot_product_ab)

# 5. –°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞–Ω–Ω—è ùëè (–ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–ª–∏ –≤–µ–∫—Ç–æ—Ä-—Ä—è–¥–æ–∫ —É –≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–≤–ø–µ—Ü—å):
scalar_product = np.dot(a, b.T)[0, 0]
print("5. –°–∫–∞–ª—è—Ä–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ a —Ç–∞ b:\n", scalar_product)

# 6. –î–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞
hadamard_ab = a * b
print("6. –î–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞ a —Ç–∞ b:\n", hadamard_ab)



# 7. –î—ñ–ª–µ–Ω–Ω—è
division_ab = a / b
print("7. –î—ñ–ª–µ–Ω–Ω—è a —Ç–∞ b:\n", division_ab)

# 8. –¥—ñ–ª–µ–Ω–Ω—è ùëé‚Äæ —Ç–∞ ùëè‚Äæùëá  –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
division_matrix = a.T / b
print("8. –¥—ñ–ª–µ–Ω–Ω—è ùëé‚Äæ —Ç–∞ ùëè‚Äæùëá:\n", division_matrix)

import numpy as np
import matplotlib.pyplot as plt

# –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –≤–∏–º—ñ—Ä–æ–º
x = np.array([2, 1])

# 1. –ó–º–µ–Ω—à–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –≤ 2 —Ä–∞–∑–∏ –ø–æ –æ—Å—ñ OX —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –≤ 3 —Ä–∞–∑–∏ –ø–æ –æ—Å—ñ OY
# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
sx = 0.5  # –ó–º–µ–Ω—à–µ–Ω–Ω—è –≤ 2 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ OX
sy = 3    # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –≤ 3 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ OY
T1 = np.array([[sx, 0],[0, sy]])  # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–ø–æ—Å—ñ–± —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é T

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ –≤–µ–∫—Ç–æ—Ä–∞ x
x1 = np.dot(T1, x)

print("1. –ó–º–µ–Ω—à–µ–Ω–Ω—è –≤ 2 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ OX –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –≤ 3 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ OY :\n", x1)

# 2. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
x2 = -x
print("2. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x:\n", x2)

# 3. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ -3 –ø–æ –æ—Å—ñ OX —Ç–∞ –Ω–∞ 1 –ø–æ –æ—Å—ñ OY
# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è
T2 = np.array([[1, 0], [0, 1]])
translation = np.array([-3, 1])
x3 = np.dot(T2, x) + translation

print("3. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–π –≤–µ–∫—Ç–æ—Ä x:\n", x3)

# 4. –ó–º—ñ—â–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –Ω–∞ 60¬∞ –ø–æ –æ—Å—ñ OY
# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –∑—Å—É–≤—É –Ω–∞ 60¬∞
angle_rad = np.radians(60)  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞–¥—É—Å—ñ–≤ –≤ —Ä–∞–¥—ñ–∞–Ω–∏
T3 = np.array([[np.cos(angle_rad), -np.sin(angle_rad)],
               [np.sin(angle_rad), np.cos(angle_rad)]])

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ –≤–µ–∫—Ç–æ—Ä–∞ x
x4 = np.dot(T3, x)
print("4. –ó–º—ñ—â–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –Ω–∞ 60¬∞ –ø–æ –æ—Å—ñ OY:\n", x4)

# 5. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞ 30¬∞
# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç—É –Ω–∞ 30¬∞
angle_rad_30 = np.radians(30)
T4 = np.array([[np.cos(angle_rad_30), -np.sin(angle_rad_30)],
               [np.sin(angle_rad_30), np.cos(angle_rad_30)]])

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ –≤–µ–∫—Ç–æ—Ä–∞ x
x5 = np.dot(T4, x)

print("5. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ x –Ω–∞ 30¬∞:\n", x5)

# 6. –û–±'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å –∑ –∫—Ä–æ–∫—ñ–≤ 1, 2, 4, 5 –≤ –æ–¥–Ω—É –º–∞—Ç—Ä–∏—Ü—é
T_total = np.dot(T4, np.dot(T3, np.dot(T2, T1)))
# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ –≤–µ–∫—Ç–æ—Ä–∞ x
x_transformed = np.dot(T_total, x)

print("6. –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–µ–∫—Ç–æ—Ä x:\n", x_transformed)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É
fig, ax = plt.subplots()
ax.set_xlim(-6, 6)
ax.set_ylim(-6, 6)
ax.set_aspect('equal', 'box')

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä—ñ–≤ –∑ –ø—Ä–æ–∑–æ—Ä–æ—é –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
ax.quiver(0, 0, x[0], x[1], angles='xy', scale_units='xy', scale=1, color='blue', alpha=0.5, label='2. Original x')
ax.quiver(0, 0, x1[0], x1[1], angles='xy', scale_units='xy', scale=1, color='green', alpha=0.5, label='1. Scaled x')
ax.quiver(0, 0, x2[0], x2[1], angles='xy', scale_units='xy', scale=1, color='red', alpha=0.5, label='dop. Reflected x')
ax.quiver(0, 0, x3[0], x3[1], angles='xy', scale_units='xy', scale=1, color='purple', alpha=0.5, label='3. Translated x')
ax.quiver(0, 0, x4[0], x4[1], angles='xy', scale_units='xy', scale=1, color='orange', alpha=0.5, label='4. Rotated 60¬∞ x')
ax.quiver(0, 0, x5[0], x5[1], angles='xy', scale_units='xy', scale=1, color='brown', alpha=0.5, label='5. Rotated 30¬∞ x')
ax.quiver(0, 0, x_transformed[0], x_transformed[1], angles='xy', scale_units='xy', scale=1, color='black', alpha=0.5, label='6. Combined Transform x')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏
ax.grid(True)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏
ax.legend()

# –ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ—ñ–∫—É
plt.show()

